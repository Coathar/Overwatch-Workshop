import "customGameSettings.json";

globalvar define heroArray = [
    Hero.Ana,
    Hero.Ashe,
    Hero.Baptiste,
    Hero.Bastion,
    Hero.Brigitte, 
    Hero.Doomfist, 
    Hero.Dva, 
    Hero.Echo, 
    Hero.Genji, 
    Hero.Hanzo, 
    Hero.JunkerQueen, 
    Hero.Junkrat, 
    Hero.Kiriko,
    Hero.Lifeweaver, 
    Hero.Lucio, 
    Hero.Mei, 
    Hero.Mercy, 
    Hero.Moira,
    Hero.Orisa,
    Hero.Pharah,
    Hero.Ramattra,
    Hero.Reaper,
    Hero.Reinhardt,
    Hero.Roadhog,
    Hero.Sigma,
    Hero.Sojourn,
    Hero.Soldier76,
    Hero.Sombra,
    Hero.Symmetra,
    Hero.Torbjorn,
    Hero.Tracer,
    Hero.Widowmaker,
    Hero.Winston,
    Hero.WreckingBall,
    Hero.Zarya,
    Hero.Zenyatta];

rule: 'Skip Assembling heroes'
Event.OngoingGlobal
if (IsAssemblingHeroes())
{
    SetMatchTime(0);
}

rule: 'Skip Setup'
Event.OngoingGlobal
if (IsInSetup())
{
    SetMatchTime(5);
}

rule: 'Teleport to Point A'
Event.OngoingPlayer
if (IsButtonHeld(EventPlayer(), Button.Interact))
{
    teleportToPointA(EventPlayer());
}

rule: 'Teleport to end'
Event.OngoingPlayer
if(IsButtonHeld(EventPlayer(), Button.Ultimate))
{
    // Teleport(PlayersInSlot(0, Team.Team2), Vector(-59.33, -0.40, 103.96));
    facePayloadEnd(EventPlayer());
    teleportToPayloadEnd(EventPlayer());
}

rule: 'Send Debug'
Event.OngoingPlayer
{
    CreateHudText(EventPlayer(), "Player Location", PositionOf(EventPlayer()), "", Location.Left);
    CreateHudText(EventPlayer(), "Player Vector", FacingDirectionOf(EventPlayer()), "", Location.Left);
}

rule: 'Swap Hero'
Event.OngoingPlayer
if (IsButtonHeld(EventPlayer(), Button.Reload))
{
    Wait(1, WaitBehavior.AbortWhenFalse);
    SetAllowedHeroes(EventPlayer(), RemoveFromArray(AllowedHeroes(EventPlayer()), HeroOf(EventPlayer())));
    ResetHeroAvailability(EventPlayer());
}

rule: 'Set Match Time'
Event.OngoingPlayer
if (IsButtonHeld(EventPlayer(), Button.Crouch))
{
    SetMatchTime(90000);
}

rule: 'End Match'
Event.OngoingPlayer
if (IsButtonHeld(EventPlayer(), Button.Melee)  && IsButtonHeld(EventPlayer(), Button.Crouch))
{
    SetMatchTime(0);
}


rule: 'Touch Point'
Event.OngoingPlayer
if (!IsOnObjective() && IsButtonHeld(EventPlayer(), Button.Melee))
{
    Wait(10, WaitBehavior.AbortWhenFalse);
    // This part is very hacky and still somewhat inconsistent. 
    // The numbers I used were all guesses and what worked for me
    facePayloadEnd(EventPlayer());
    StartThrottleInDirection(EventPlayer(), FacingDirectionOf(EventPlayer()), throttleForMap());
    Wait(0.02, WaitBehavior.IgnoreCondition);
    PressButton(EventPlayer(), Button.Ability2);
    Wait(0.1, WaitBehavior.IgnoreCondition);
    StopThrottleInDirection(EventPlayer());
}

void facePayloadEnd(Player player) "Face Payload End"
{
    switch (CurrentMap())
    {
        case Map.Blizzard_World:
            SetFacing(player, Vector(0.63, 0, 0.77));
            break;
        case Map.Midtown:
            SetFacing(player, Vector(1, 0, 0.0));
            break;
        case Map.Eichenwalde:
            SetFacing(player, Vector(0.25, 0, 0.97));
            break;
        case Map.Numbani:
            SetFacing(player, Vector(0.58, 0, -0.81));
            break;
        case Map.Kings_Row:
            SetFacing(player, Vector(-0.98, 0, 0.17));
            break;
        case Map.Hollywood:
            SetFacing(player, Vector(-0.47, 0, -0.88));
            break;
        case Map.Paraiso:
            SetFacing(player, Vector(0.67, 0, -0.70));
            break;
        case Map.Rialto:
            if (TeamScore(TeamOf(player)) == 0)
            {
                SetFacing(player, Vector(-1, 0, 0));
            }
            else if (TeamScore(TeamOf(player)) == 1)
            {
                SetFacing(player, Vector(-1, 0, 0));
            }
            break;
        case Map.Dorado:
            if (TeamScore(TeamOf(player)) == 0)
            {
                SetFacing(player, Vector(0.89, 0, 0.41));
            }
            else if (TeamScore(TeamOf(player)) == 1)
            {
                SetFacing(player, Vector(0.97, 0, 0.24));
            }
            else if (TeamScore(TeamOf(player)) == 2)
            {
                SetFacing(player, Vector(0.97, 0, 0.24));
            }
            break;
        case Map.Junkertown:
            if (TeamScore(TeamOf(player)) == 0)
            {
                SetFacing(player, Vector(-0.50, 0, -0.86));
            }
            else if (TeamScore(TeamOf(player)) == 1)
            {
                SetFacing(player, Vector(-0.20, 0, -0.98));
            }
            break;
    }
}

void teleportToPayloadEnd(Player player) "Teleport Payload End"
{
    switch (CurrentMap())
    {
        case Map.Blizzard_World:
            Teleport(player, Vector(-59.30, -0.40, 103.99));
            break;
        case Map.Midtown:
            Teleport(player, Vector(56.11, 3.58, -22.06));
            break;
        case Map.Eichenwalde:
           Teleport(player, Vector(86.15, 12.66, -74.93));
           break;
        case Map.Numbani:
           Teleport(player, Vector(147.68, -4.17, 15.74));
           break;
        case Map.Kings_Row:
           Teleport(player, Vector(-93.11, 0.93, -9.77));
           break;
        case Map.Hollywood:
           Teleport(player, Vector(5.24, 1.85, -69.49));
           break;
        case Map.Paraiso:
           Teleport(player, Vector(4.02, 4.83, -85.87));
           break;
        case Map.Rialto:
            if (TeamScore(TeamOf(player)) == 0)
            {
                Teleport(player, Vector(45.77, -0.40, -69.02));
            }
            else if (TeamScore(TeamOf(player)) == 1)
            {
                Teleport(player, Vector(-20.33, -1.40, -67.17));
            }
            break;
        case Map.Dorado:
            if (TeamScore(TeamOf(player)) == 0)
            {
                Teleport(player, Vector(66.58, 6.63, -15.21));
            }
            else if (TeamScore(TeamOf(player)) == 1)
            {
                Teleport(player, Vector(122.60, 10.83, 24.10));
            }
            else if (TeamScore(TeamOf(player)) == 2)
            {
                Teleport(player, Vector(139.12, 11, 28.22));
            }
            break;
        case Map.Junkertown:
            if (TeamScore(TeamOf(player)) == 0)
            {
                Teleport(player, Vector(-29.24, 4.43, -47.30));
            }
            else if (TeamScore(TeamOf(player)) == 1)
            {
                Teleport(player, Vector(-56.41, 7.26, -96.97));
            }
            break;
    }
}

void teleportToPointA(Player player) "Teleport to Point A"
{
    switch (CurrentMap())
    {
        case Map.Blizzard_World:
            Teleport(player, Vector(4.73, 1.90, 73.15));
            break;
        case Map.Midtown:
            Teleport(player, Vector(9.59, 4.72, 28.77));
            break;
        case Map.Eichenwalde:
           Teleport(player, Vector(11.17, 8.38, -73.12));
           break;
        case Map.Numbani:
           Teleport(player, Vector(86.58, 2.35, -2.07));
           break;
        case Map.Kings_Row:
           Teleport(player, Vector(-15.11, 0.07, -36.38));
           break;
        case Map.Hollywood:
           Teleport(player, Vector(-27.81, 3.46, -3.54));
           break;
        case Map.Paraiso:
           Teleport(player, Vector(-8.53, 1.0, -12.26));
           break;
    }
}

Number throttleForMap()
{
    switch (CurrentMap())
    {
        case Map.Midtown:
            return 0.75;
        case Map.Eichenwalde:
        case Map.Kings_Row:
            return 0.85;
        case Map.Rialto:
            if (TeamScore(TeamOf(EventPlayer())) == 0)
                return 1;
        case Map.Dorado:
            if (TeamScore(TeamOf(EventPlayer())) == 1)
                return 1;
        case Map.Junkertown:
            if (TeamScore(TeamOf(EventPlayer())) == 0)
                return 1;
    }

    return 0.5;
}